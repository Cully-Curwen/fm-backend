type Query {
  customerData: Customer

  administeredMarkets: [Market!]

  administeredTraders: [TraderCard!]  

  marketsList: [Market!]

  marketDetails(marketId: ID!): Market

  # trader(traderCardId: ID!): TraderCard
}

type Mutation {
  customerRegister(
    email: String!, 
    firstName: String!, 
    lastName: String!, 
    password: String!
  ): CustomerAuthPayload

  customerLogin(email: String!, password: String!): CustomerAuthPayload
  
  customerUpdate(
    email: String, 
    firstName: String, 
    lastName: String, 
    password: String!, 
    newPassword: String
  ): Customer

  marketAdminRegister(
    email: String!, 
    firstName: String!, 
    lastName: String!, 
    password: String!
  ): MarketAdminAuthPayload
  
  marketAdminLogin(email: String!, password: String!): MarketAdminAuthPayload
  
  marketAdminUpdate(
    email: String, 
    firstName: String, 
    lastName: String, 
    password: String!, 
    newPassword: String
  ): MarketAdmin

  traderAdminRegister(
    email: String!, 
    firstName: String!, 
    lastName: String!, 
    password: String!
  ): TraderAdminAuthPayload
  
  traderAdminLogin(email: String!, password: String!): TraderAdminAuthPayload
  
  traderAdminUpdate(
    email: String, 
    firstName: String, 
    lastName: String, 
    password: String!, 
    newPassword: String
  ): TraderAdmin

  marketCreate(
    name: String!, 
    blurb: String!, 
    address: String, 
    geoLocation: GeoPointInput!, 
    directions: String,
    imgUrl: String,
    openHours: OpenHoursInput!,
  ): Market
  
  marketUpdate(
    id: ID!,
    name: String, 
    blurb: String, 
    address: String, 
    geoLocation: GeoPointInput, 
    directions: String,
    imgUrl: String,
    openHours: OpenHoursInput, 
  ): Market

  marketAddTraderTo(id: ID!, traderCardId: ID!): Market

  marketRemoveTraderFrom(id: ID!, traderCardId: ID!): Market

  traderCardCreate(
    name: String!,
    blurb: String!,
    imgUrl: String,
    links: UrlLinksInput,
    produceTags: [String!]!,
  ): TraderCard

  traderCardUpdate(
    id: ID!,
    name: String,
    blurb: String,
    imgUrl: String,
    links: UrlLinksInput,
    produceTags: [String!],
  ): TraderCard

  itemCreate(
    traderCardId: String!,
    name: String!,
    description: String!,
    stock: Int!,
    price: Int!,
  ): Item

  itemUpdate(
    id: ID!
    name: String!,
    description: String!,
    stock: Int!,
    price: Int!,
  ): Item
  
  # itemRemove(): Item

  cartAddItem(
    marketId: String!,
    item: ItemsCartInput,
  ): Customer

  cartUpdateItem(
    marketId: String!,
    item: ItemsCartInput,
  ): Customer
  
  cartRemoveItem(
    marketId: String!,
    item: ItemsCartInput,
  ): Customer

  # checkout(): Order
}

type CustomerAuthPayload {
  token: String!
  customer: Customer!
}

type MarketAdminAuthPayload {
  token: String!
  marketAdmin: MarketAdmin!
  markets: [Market!]!
}

type TraderAdminAuthPayload {
  token: String!
  traderAdmin: TraderAdmin!
  traderCards: [TraderCard!]!
}

type MarketAdmin {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
}

type TraderAdmin {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
}

type Customer {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  shoppingCarts: [MarketCart!]!
}

type MarketCart {
  market: Market!
  items: [ItemsCart!]!
}

type ItemsCart {
  traderCardId: String!
  itemId: String!
  name: String!
  description: String!
  price: Int!
  quantity: Int!
}

input ItemsCartInput {
  traderCardId: String!
  itemId: String!
  name: String!
  description: String!
  price: Int!
  quantity: Int!
}

type Market {
  id: ID!
  admins: [String!]!
  name: String!
  blurb: String!
  address: String
  geoLocation: GeoPoint!
  directions: String
  imgUrl: String
  openHours: OpenHours!
  traders: [TraderCard!]!
}

type GeoPoint {
  type: String!
  coordinates: [Float!]!
}

input GeoPointInput {
  type: String!
  coordinates: [Float!]!
}

type OpenHours {
  openTime: String!
  closeTime: String!
  tradingDay: String!
}

input OpenHoursInput {
  openTime: String!
  closeTime: String!
  tradingDay: String!
}

type TraderCard {
  id: ID!
  admins: [String!]!
  name: String!
  blurb: String!
  imgUrl: String
  links: UrlLinks
  produceTags: [String!]!
  inventory: [Item!]!
}

type UrlLinks {
  website: String
  email: String
  facebook: String
  twitter: String
  Instagram: String
}

input UrlLinksInput {
  website: String
  email: String
  facebook: String
  twitter: String
  Instagram: String
}

type Item {
  id: ID!
  traderCardId: String!
  name: String!
  description: String!
  stock: Int!
  price: Int!
}

type Order {
  id: ID!
  customerId: String!
  marketId: String!
  orderCode: String!
  orderItems: [ItemsOrder!]!
  totalPrice: Int!
  date: String!
}

type ItemsOrder {
  traderId: String!
  marketId: String!
  name: String!
  description: String!
  quantity: Int!
  price: Int!
}